---
# ワークフローの名前
name: JSONデータ更新 (Workload Identity連携)
on:
  schedule:
    # 日本時間午前9時に毎日実行 (UTCの午前0時)
    - cron: 0 0 * * *
  # GitHubのUIから手動で実行できるようにする
  workflow_dispatch:
jobs:
  update-and-release:
    runs-on: ubuntu-latest
    # ジョブに与える権限
    permissions:
      # リポジトリへのコミット、リリース作成のために必要
      contents: write
      # Workload Identity連携によるGoogle Cloudへの認証のために必要
      id-token: write
    steps:
      # ステップ1: スクリプトが格納されているブランチ(master)をチェックアウトする
      - name: 1. スクリプト用リポジトリをチェックアウト (master)
        uses: actions/checkout@v4
        with:
          ref: master
          # 'main_repo'というディレクトリにチェックアウトする
          path: main_repo

      # ステップ2: Workload Identity連携を使用してGoogle Cloudへ認証する
      - name: 2. Google Cloudへ認証
        uses: google-github-actions/auth@v2
        with:
          # GitHub Secretsに設定した値を参照する
          workload_identity_provider: >-
            ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # ステップ3: Pythonの実行環境をセットアップする
      - name: 3. Python環境のセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # ステップ4: Pythonスクリプトの実行に必要なライブラリをインストールする
      - name: 4. 依存ライブラリのインストール
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth-httplib2 google-auth

        # ステップ5: Pythonスクリプトを実行してJSONファイルを生成する
      - name: 5. Pythonスクリプトを実行してJSONを生成
        id: generate_json
        working-directory: ./main_repo
        run: |
          python sheet_to_json.py
          if [ -f imas_music_db.json ]; then
            echo "JSON_EXISTS=true" >> $GITHUB_OUTPUT
            echo "json_file_path=$(pwd)/imas_music_db.json" >> $GITHUB_OUTPUT
            echo "✅ JSONファイルが正常に生成されました。"
          else
            echo "JSON_EXISTS=false" >> $GITHUB_OUTPUT
            echo "❌ エラー: JSONファイルが生成されませんでした。"
            exit 1
          fi

      # ステップ6: Node.js環境をセットアップする
      - name: 6. Node.js環境のセットアップ
        if: steps.generate_json.outputs.JSON_EXISTS == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # LTS版のNode.jsを使用

      # ステップ7: PrettierでJSONファイルをフォーマットする
      - name: 7. PrettierでJSONをフォーマット
        if: steps.generate_json.outputs.JSON_EXISTS == 'true'
        run: |
          npm install -g prettier
          prettier --write ${{ steps.generate_json.outputs.json_file_path }}
          echo "💅 JSONファイルがPrettierでフォーマットされました。"

      # ステップ8: 生成されたデータをコミットするブランチ(data)をチェックアウトする
      - name: 8. データコミット用リポジトリをチェックアウト (data)
        if: steps.generate_json.outputs.JSON_EXISTS == 'true'
        uses: actions/checkout@v4
        with:
          ref: data
          path: data_repo

      # ステップ9: データの差分があればコミットしてプッシュする
      - name: 9. 差分をコミットしてプッシュ
        if: steps.generate_json.outputs.JSON_EXISTS == 'true'
        id: commit_push
        run: |
          # 後続のステップのためにデフォルト出力を設定
          echo "committed=false" >> $GITHUB_OUTPUT

          # 生成されたJSONファイルをデータ用ディレクトリにコピー
          cp ${{ steps.generate_json.outputs.json_file_path }} \
            ./data_repo/imas_music_db.json

          # データ用のディレクトリに移動
          cd ./data_repo

          # Gitのコミットユーザーを設定
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # ファイルに変更があるか確認
          if [ -n "$(git status --porcelain imas_music_db.json)" ]; then
            echo "🔄 imas_music_db.json に変更を検出しました。"
            git add imas_music_db.json

            # コミットメッセージとタグ名用の日付を生成 (JST)
            COMMIT_DATE_JST=$(TZ=Asia/Tokyo date +'%Y-%m-%d %H:%M:%S')
            TAG_NAME=$(TZ=Asia/Tokyo date +'%Y%m%d-%H%M%S')
            git commit -m "📊 データ自動更新: ${COMMIT_DATE_JST} (JST)"
            git push origin data
            echo "✅ dataブランチにコミットをプッシュしました。"

            # 後続ステップのために出力を更新
            echo "committed=true" >> $GITHUB_OUTPUT
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            echo "✅ imas_music_db.json に変更はありません。"
          fi

      # ステップ10: 新しいデータでリリースを作成する
      - name: 10. リリースを作成
        if: steps.commit_push.outputs.committed == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.commit_push.outputs.tag_name }}
          release_name: データ更新 (${{ steps.commit_push.outputs.tag_name }})
          body: |
            スプレッドシートからの自動データ更新です。
          draft: false
          prerelease: false
          # dataブランチの最新コミットからリリースを作成
          commitish: data

      # ステップ11: 生成されたJSONファイルをリリースに添付する
      - name: 11. リリースアセットをアップロード
        if: steps.commit_push.outputs.committed == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./data_repo/imas_music_db.json
          asset_name: imas_music_db.json
          asset_content_type: application/json
