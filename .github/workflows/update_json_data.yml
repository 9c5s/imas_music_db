name: JSONデータ更新 (スプレッドシートから)

on:
  schedule:
    # 日本時間午前9時に毎日実行 (UTCの午前0時)
    - cron: "0 0 * * *"
  workflow_dispatch: # 手動実行を許可

jobs:
  update_data:
    runs-on: ubuntu-latest
    # リポジトリへの書き込み権限をジョブに付与
    permissions:
      contents: write # リポジトリコンテンツの読み書き (コミット、リリース作成のため)

    steps:
      - name: メインブランチをチェックアウト (スクリプト用)
        uses: actions/checkout@v4
        with:
          # Pythonスクリプトとこのワークフローファイルがあるブランチを指定
          ref: master # スクリプトのあるブランチをmasterに指定
          path: main_repo # スクリプト実行用の作業ディレクトリ

      - name: Python環境のセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: "3.13" # ご指定のPythonバージョン

      - name: 依存ライブラリのインストール (requests)
        working-directory: ./main_repo # スクリプトがあるディレクトリ
        run: |
          python -m pip install --upgrade pip
          pip install requests
          echo "requestsライブラリをインストールしました。"

      - name: Pythonスクリプトを実行してJSONを生成
        working-directory: ./main_repo # スクリプトがあるディレクトリ
        id: generate_json
        run: |
          # Pythonスクリプトを実行
          python sheet_to_json.py

          # 生成されたファイルが存在するか確認
          if [ -f imas_music_db.json ]; then
            echo "JSON_EXISTS=true" >> $GITHUB_OUTPUT
            # 生成されたファイルのフルパスを次のステップに渡す
            echo "json_file_path=$(pwd)/imas_music_db.json" >> $GITHUB_OUTPUT
            echo "JSONファイルが正常に生成されました: $(pwd)/imas_music_db.json"
          else
            echo "JSON_EXISTS=false" >> $GITHUB_OUTPUT
            echo "エラー: Pythonスクリプトによって imas_music_db.json が生成されませんでした。"
            exit 1
          fi

      - name: dataブランチをチェックアウト (データコミット用)
        # JSONファイルが正常に生成された場合のみ実行
        if: steps.generate_json.outputs.JSON_EXISTS == 'true'
        uses: actions/checkout@v4
        with:
          ref: data # JSONデータを保存するブランチ
          path: data_repo # データコミット用の別の作業ディレクトリ
          # GITHUB_TOKEN は actions/checkout がデフォルトで使用します

      - name: 差分があればコミットしてプッシュ
        # JSONファイルが正常に生成された場合のみ実行
        if: steps.generate_json.outputs.JSON_EXISTS == 'true'
        id: commit_push # このステップにIDを付与
        working-directory: ./data_repo # dataブランチをチェックアウトしたディレクトリ
        run: |
          # デフォルト値を設定 (コミットがない場合)
          echo "committed=false" >> $GITHUB_OUTPUT
          echo "tag_name_datetime=" >> $GITHUB_OUTPUT

          GENERATED_JSON_PATH="${{ steps.generate_json.outputs.json_file_path }}"
          echo "main_repoで生成されたJSONファイルのパス: ${GENERATED_JSON_PATH}"

          cp "${GENERATED_JSON_PATH}" ./imas_music_db.json
          echo "imas_music_db.json を data_repo にコピーしました。"

          git config user.name "${{ github.actor }}[bot]"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}[bot]@users.noreply.github.com"

          if [ -n "$(git status --porcelain imas_music_db.json)" ]; then
            echo "imas_music_db.json に変更が検出されました。"
            git add imas_music_db.json
            
            COMMIT_MESSAGE_DATETIME_JST=$(TZ=Asia/Tokyo date +'%Y-%m-%d %H:%M:%S JST')
            # タグ名用にスペースをアンダースコアに置換し、コロンもハイフンに置換
            TAG_NAME_DATETIME_FOR_RELEASE=$(echo "${COMMIT_MESSAGE_DATETIME_JST}" | sed 's/ /_/g' | sed 's/:/-/g' | sed 's/JST//g') # JSTの文字も除去
            
            git commit -m "データ更新: ${COMMIT_MESSAGE_DATETIME_JST}"
            git push origin data
            echo "imas_music_db.json をコミットし、dataブランチにプッシュしました。"
            
            # コミットが行われたので、出力を更新
            echo "committed=true" >> $GITHUB_OUTPUT
            echo "tag_name_datetime=${TAG_NAME_DATETIME_FOR_RELEASE}" >> $GITHUB_OUTPUT
          else
            echo "imas_music_db.json に変更はありません。コミットする内容はありません。"
            # committed は false のまま (runの先頭で設定済み)
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: リリースを作成
        # 前のステップでコミットが行われた場合のみ実行
        if: steps.commit_push.outputs.committed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.commit_push.outputs.tag_name_datetime }}
          release_name: データ更新 (${{ steps.commit_push.outputs.tag_name_datetime }})
          body: |
            自動更新によるデータリリースです。
            ファイル: imas_music_db.json
          draft: false
          prerelease: false
