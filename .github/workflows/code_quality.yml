---
# ワークフローの名前
name: コード品質チェック

# プルリクエスト時にトリガーされる
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: コード品質チェック
    # PRコメントを投稿するための権限
    permissions:
      contents: read
      pull-requests: write
    steps:
      # ステップ1: コードをチェックアウト
      - name: 1. リポジトリをチェックアウト
        uses: actions/checkout@v4

      # ステップ2: uvをインストール（高速なPythonパッケージマネージャー）
      - name: 2. uvのインストール
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: pyproject.toml

      # ステップ3: 依存関係のインストール（開発依存関係を含む）
      - name: 3. 依存関係のインストール
        run: |
          uv sync

      # ステップ4: シェルスクリプトチェックの実行
      - name: 4. シェルスクリプトチェック実行
        id: shell_check
        run: |
          # シェルスクリプトチェックの結果を保存
          echo "## 🐚 シェルスクリプト品質チェック結果" > shell_report.md
          echo "" >> shell_report.md

          # 対象ファイルの存在確認
          if ! find . -name "*.sh" -o -name "*.bash" | grep -q .; then
            echo "✅ 対象ファイルなし: シェルスクリプトファイルが見つかりません" >> shell_report.md
            echo "SHELL_LINT_STATUS=0" >> $GITHUB_OUTPUT
            echo "SHELL_FORMAT_STATUS=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # shellcheckチェック
          echo "### ShellCheck結果" >> shell_report.md
          if find . -name "*.sh" -o -name "*.bash" | \
            xargs -r uv run shellcheck \
            --rcfile=config/.shellcheckrc > \
            shell_lint_output.txt 2>&1; then
            echo "✅ ShellCheck: エラーなし" >> shell_report.md
            SHELL_LINT_STATUS=0
          else
            echo "❌ ShellCheck: エラーあり" >> shell_report.md
            echo '```' >> shell_report.md
            cat shell_lint_output.txt >> shell_report.md
            echo '```' >> shell_report.md
            SHELL_LINT_STATUS=1
          fi
          echo "" >> shell_report.md

          # shfmtフォーマットチェック
          echo "### shfmtフォーマットチェック結果" >> shell_report.md
          if find . -name "*.sh" -o -name "*.bash" | \
            xargs -r uv run shfmt -i 2 -p -s -ci -sr -fn -d \
            > shell_format_output.txt 2>&1; then
            echo "✅ shfmt: 問題なし" >> shell_report.md
            SHELL_FORMAT_STATUS=0
          else
            echo "❌ shfmt: 修正が必要" >> shell_report.md
            echo '```diff' >> shell_report.md
            cat shell_format_output.txt >> shell_report.md
            echo '```' >> shell_report.md
            SHELL_FORMAT_STATUS=1
          fi
          echo "" >> shell_report.md

          # 修正方法
          if [ $SHELL_LINT_STATUS -ne 0 ] || \
            [ $SHELL_FORMAT_STATUS -ne 0 ]; then
            echo "### 💡 シェルスクリプト修正方法" >> shell_report.md
            echo "以下のコマンドをローカルで実行してください：" >> shell_report.md
            echo '```bash' >> shell_report.md
            if [ $SHELL_LINT_STATUS -ne 0 ]; then
              echo "# ShellCheckリンティングチェック" >> shell_report.md
              echo "uv run shellcheck --rcfile=config/.shellcheckrc \
                ./*.sh scripts/*.sh" >> shell_report.md
            fi
            if [ $SHELL_FORMAT_STATUS -ne 0 ]; then
              echo "# shfmtフォーマットの自動修正" >> shell_report.md
              echo "uv run shfmt -i 2 -p -s -ci -sr -fn -w \
                ./*.sh scripts/*.sh" >> shell_report.md
            fi
            echo '```' >> shell_report.md
          fi

          # 結果を出力に保存
          echo "SHELL_LINT_STATUS=$SHELL_LINT_STATUS" >> $GITHUB_OUTPUT
          echo "SHELL_FORMAT_STATUS=$SHELL_FORMAT_STATUS" >> $GITHUB_OUTPUT
        continue-on-error: true

      # ステップ5: YAMLチェックの実行
      - name: 5. YAMLチェック実行
        id: yaml_check
        run: |
          # YAMLチェックの結果を保存
          echo "## 📄 YAMLコード品質チェック結果" > yaml_report.md
          echo "" >> yaml_report.md

          # 対象ファイルの存在確認
          if ! find . \( -name "*.yml" -o -name "*.yaml" \) \
              -not -path "./node_modules/*" | grep -q .; then
            echo "✅ 対象ファイルなし: YAMLファイルが見つかりません" >> yaml_report.md
            echo "YAML_LINT_STATUS=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # yamllintチェック
          echo "### yamllint結果" >> yaml_report.md
          if uv run yamllint -c config/yamllint.yml . >\
            yaml_lint_output.txt 2>&1; then
            echo "✅ yamllint: エラーなし" >> yaml_report.md
            YAML_LINT_STATUS=0
          else
            echo "❌ yamllint: エラーあり" >> yaml_report.md
            echo '```' >> yaml_report.md
            cat yaml_lint_output.txt >> yaml_report.md
            echo '```' >> yaml_report.md
            YAML_LINT_STATUS=1
          fi
          echo "" >> yaml_report.md

          # 修正方法
          if [ $YAML_LINT_STATUS -ne 0 ]; then
            echo "### 💡 YAML修正方法" >> yaml_report.md
            echo "以下のコマンドをローカルで実行してください：" >> yaml_report.md
            echo '```bash' >> yaml_report.md
            echo "# YAMLフォーマットの自動修正" >> yaml_report.md
            echo "uv run yamlfix -c config/yamlfix.toml ." >> yaml_report.md
            echo "" >> yaml_report.md
            echo "# yamllintチェック" >> yaml_report.md
            echo "uv run yamllint -c config/yamllint.yml ." >> yaml_report.md
            echo '```' >> yaml_report.md
          fi

          # 結果を出力に保存
          echo "YAML_LINT_STATUS=$YAML_LINT_STATUS" >> $GITHUB_OUTPUT
        continue-on-error: true

      # ステップ6: Ruffチェックの実行と結果の保存
      - name: 6. Ruffチェック実行
        id: ruff_check
        run: |
          # Ruffチェックの結果を保存
          echo "## 🔍 Ruffコード品質チェック結果" > ruff_report.md
          echo "" >> ruff_report.md

          # 対象ファイルの存在確認
          if ! find . -name "*.py" -not -path "./node_modules/*" | \
              grep -q .; then
            echo "✅ 対象ファイルなし: Pythonファイルが見つかりません" >> ruff_report.md
            echo "LINT_STATUS=0" >> $GITHUB_OUTPUT
            echo "FORMAT_STATUS=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # リンティング
          echo "### リンティング結果" >> ruff_report.md
          if uv run ruff check --config config/ruff.toml >\
            ruff_lint_output.txt 2>&1; then
            echo "✅ リンティング: エラーなし" >> ruff_report.md
            LINT_STATUS=0
          else
            echo "❌ リンティング: エラーあり" >> ruff_report.md
            echo '```' >> ruff_report.md
            cat ruff_lint_output.txt >> ruff_report.md
            echo '```' >> ruff_report.md
            LINT_STATUS=1
          fi
          echo "" >> ruff_report.md

          # フォーマットチェック
          echo "### フォーマットチェック結果" >> ruff_report.md
          if uv run ruff format --config config/ruff.toml \
            --check --diff > ruff_format_output.txt 2>&1; then
            echo "✅ フォーマット: 問題なし" >> ruff_report.md
            FORMAT_STATUS=0
          else
            echo "❌ フォーマット: 修正が必要" >> ruff_report.md
            echo '```diff' >> ruff_report.md
            cat ruff_format_output.txt >> ruff_report.md
            echo '```' >> ruff_report.md
            FORMAT_STATUS=1
          fi
          echo "" >> ruff_report.md

          # 統計情報
          echo "### 統計情報" >> ruff_report.md
          echo '```' >> ruff_report.md
          uv run ruff check --config config/ruff.toml \
            --statistics >> ruff_report.md 2>&1 || true
          echo '```' >> ruff_report.md
          echo "" >> ruff_report.md

          # 修正方法
          if [ $LINT_STATUS -ne 0 ] || [ $FORMAT_STATUS -ne 0 ]; then
            echo "### 💡 Python修正方法" >> ruff_report.md
            echo "以下のコマンドをローカルで実行してください：" >> ruff_report.md
            echo '```bash' >> ruff_report.md
            if [ $LINT_STATUS -ne 0 ]; then
              echo "# リンティングエラーの自動修正" >> ruff_report.md
              echo "uv run ruff check --fix \\" >> ruff_report.md
              echo "  --config config/ruff.toml" >> ruff_report.md
            fi
            if [ $FORMAT_STATUS -ne 0 ]; then
              echo "# フォーマットの自動修正" >> ruff_report.md
              echo "uv run ruff format \\" >> ruff_report.md
              echo "  --config config/ruff.toml" >> ruff_report.md
            fi
            echo '```' >> ruff_report.md
          fi

          # 結果を出力に保存
          echo "LINT_STATUS=$LINT_STATUS" >> $GITHUB_OUTPUT
          echo "FORMAT_STATUS=$FORMAT_STATUS" >> $GITHUB_OUTPUT
        continue-on-error: true

      # ステップ7: Pyrightによる型チェック
      - name: 7. Pyright型チェック実行
        id: pyright_check
        run: |
          # Pyrightチェックの結果を保存
          echo "## 🔍 Pyright型チェック結果" > pyright_report.md
          echo "" >> pyright_report.md

          # 対象ファイルの存在確認
          if ! find . -name "*.py" -not -path "./node_modules/*" | \
              grep -q .; then
            echo "✅ 対象ファイルなし: Pythonファイルが見つかりません" >> pyright_report.md
            echo "TYPE_CHECK_STATUS=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 型チェック
          echo "### 型チェック結果" >> pyright_report.md
          if uv run pyright -p config/pyrightconfig.json > pyright_output.txt 2>&1; then
            echo "✅ 型チェック: エラーなし" >> pyright_report.md
            TYPE_CHECK_STATUS=0
          else
            echo "❌ 型チェック: エラーあり" >> pyright_report.md
            echo '```' >> pyright_report.md
            cat pyright_output.txt >> pyright_report.md
            echo '```' >> pyright_report.md
            TYPE_CHECK_STATUS=1
          fi
          echo "" >> pyright_report.md

          # 修正方法
          if [ $TYPE_CHECK_STATUS -ne 0 ]; then
            echo "### 💡 型エラー修正方法" >> pyright_report.md
            echo "以下のコマンドをローカルで実行してチェックしてください：" >> pyright_report.md
            echo '```bash' >> pyright_report.md
            echo "# 型チェック実行" >> pyright_report.md
            echo "uv run pyright -p config/pyrightconfig.json" >> pyright_report.md
            echo '```' >> pyright_report.md
            echo "" >> pyright_report.md
            echo "型エラーは手動で修正する必要があります。" >> pyright_report.md
            echo "型注釈の追加、型の修正、または設定の調整を行ってください。" >> pyright_report.md
          fi

          # 結果を出力に保存
          echo "TYPE_CHECK_STATUS=$TYPE_CHECK_STATUS" >> $GITHUB_OUTPUT
        continue-on-error: true

      # ステップ8: 簡潔なサマリーレポートの作成
      - name: 8. レポート統合
        run: |
          # 簡潔なサマリーレポートを作成（詳細はGitHub Actions UIで確認）
          cat > combined_report.md << 'EOF'
          # 🔍 コード品質チェック結果サマリー
          EOF

          # 各チェックの結果をサマリー形式で統合
          echo "## 📊 チェック結果一覧" >> combined_report.md
          echo "" >> combined_report.md

          # Shell Check結果
          if [ "${{ steps.shell_check.outputs.SHELL_LINT_STATUS }}" = "0" ] && \
             [ "${{ steps.shell_check.outputs.SHELL_FORMAT_STATUS }}" = \
             "0" ]; then
            echo "✅ **シェルスクリプト**: 問題なし" >> combined_report.md
          else
            echo "❌ **シェルスクリプト**: エラーあり" >> combined_report.md
          fi

          # YAML Check結果
          if [ "${{ steps.yaml_check.outputs.YAML_LINT_STATUS }}" = "0" ]; then
            echo "✅ **YAML**: 問題なし" >> combined_report.md
          else
            echo "❌ **YAML**: エラーあり" >> combined_report.md
          fi

          # Ruff Check結果
          if [ "${{ steps.ruff_check.outputs.LINT_STATUS }}" = "0" ] && \
             [ "${{ steps.ruff_check.outputs.FORMAT_STATUS }}" = \
             "0" ]; then
            echo "✅ **Python (Ruff)**: 問題なし" >> combined_report.md
          else
            echo "❌ **Python (Ruff)**: エラーあり" >> combined_report.md
          fi

          # Pyright Check結果
          if [ "${{ steps.pyright_check.outputs.TYPE_CHECK_STATUS }}" = \
             "0" ]; then
            echo "✅ **型チェック (Pyright)**: 問題なし" >> combined_report.md
          else
            echo "❌ **型チェック (Pyright)**: エラーあり" >> combined_report.md
          fi
          echo "" >> combined_report.md
          echo "## 🔧 修正方法" >> combined_report.md
          echo "" >> combined_report.md
          echo "エラーがある場合は、以下のコマンドをローカルで実行してください：" >> combined_report.md
          echo "" >> combined_report.md
          echo "\`\`\`bash" >> combined_report.md
          echo "# Python (Ruff)" >> combined_report.md
          echo "uv run ruff check --fix --config config/ruff.toml" \
            >> combined_report.md
          echo "uv run ruff format --config config/ruff.toml" \
            >> combined_report.md
          echo "" >> combined_report.md
          echo "# YAML" >> combined_report.md
          echo "uv run yamlfix -c config/yamlfix.toml ." >> combined_report.md
          echo "" >> combined_report.md
          echo "# Shell" >> combined_report.md
          echo "uv run shfmt -i 2 -p -s -ci -sr -fn -w ./*.sh scripts/*.sh" \
            >> combined_report.md
          echo "\`\`\`" >> combined_report.md
          echo "" >> combined_report.md
          echo "📝 **詳細なエラー内容**: " \
            "[GitHub Actions UI](https://github.com/${{ github.repository }}" \
            "/actions/runs/${{ github.run_id }})で確認してください。" \
            >> combined_report.md
          echo "📊 最終レポートサイズ: $(wc -c < combined_report.md) bytes"

      # ステップ9: PRにコメントを投稿
      - name: 9. PR コメントを投稿
        uses: thollander/actions-comment-pull-request@v3
        with:
          file-path: combined_report.md
          comment-tag: code_quality_check
          mode: recreate

      # ステップ10: GitHub形式でエラーを表示
      - name: 10. GitHub形式でエラー表示
        run: |
          # GitHub形式で再度実行（Actions UIでの視認性向上のため）
          echo "=== ShellCheck GitHub形式出力 ==="
          if find . -name "*.sh" -o -name "*.bash" | grep -q .; then
            find . -name "*.sh" -o -name "*.bash" | \
              xargs -r uv run shellcheck --rcfile=config/.shellcheckrc \
              --format=gcc . 2>&1 || true
          else
            echo "対象ファイルなし: シェルスクリプトファイルが見つかりません"
          fi
          echo "=== yamllint GitHub形式出力 ==="
          if find . \( -name "*.yml" -o -name "*.yaml" \) \
              -not -path "./node_modules/*" | grep -q .; then
            uv run yamllint -c config/yamllint.yml \
              --format github . 2>&1 || true
          else
            echo "対象ファイルなし: YAMLファイルが見つかりません"
          fi
          echo "=== Ruff GitHub形式出力 ==="
          if find . -name "*.py" -not -path "./node_modules/*" | \
              grep -q .; then
            uv run ruff check --config config/ruff.toml \
              --output-format=github . 2>&1 || true
          else
            echo "対象ファイルなし: Pythonファイルが見つかりません"
          fi
          echo "=== Pyright GitHub形式出力 ==="
          if find . -name "*.py" -not -path "./node_modules/*" | \
              grep -q .; then
            uv run pyright -p config/pyrightconfig.json 2>&1 || true
          else
            echo "対象ファイルなし: Pythonファイルが見つかりません"
          fi

      # ステップ11: 失敗判定
      - name: 11. チェック結果の判定
        if: >-
          steps.shell_check.outputs.SHELL_LINT_STATUS != '0' ||
          steps.shell_check.outputs.SHELL_FORMAT_STATUS != '0' ||
          steps.yaml_check.outputs.YAML_LINT_STATUS != '0' ||
          steps.ruff_check.outputs.LINT_STATUS != '0' ||
          steps.ruff_check.outputs.FORMAT_STATUS != '0' ||
          steps.pyright_check.outputs.TYPE_CHECK_STATUS != '0'
        run: |-
          echo "❌ コード品質チェックでエラーが検出されました。"
          echo "詳細はPRのコメントを確認してください。"
          exit 1
